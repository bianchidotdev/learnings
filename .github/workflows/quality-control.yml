name: Elixir CI Workflow

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [elixir_book]

    defaults:
      run:
        working-directory: ./${{ matrix.project }}
    env:
      MIX_ENV: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Erlang/OTP + Elixir
      id: setup-beam
      uses: erlef/setup-beam@v1
      with:
        otp-version: '24.0' # version range or exact (required)
        elixir-version: '1.13' # version range or exact (required)

    - name: Restore dependency/build cache üóÉÔ∏è
      uses: actions/cache@v2
      with:
        path: |
          deps
          _build
        # cache key is hierarchical: OS, otp-version, elixir-version, mix.lock
        key: ${{ runner.os }}-mix-${{ steps.setup-beam.outputs.otp-version }}-${{ steps.setup-beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        # restore keys are tried on cache misses, and only match the key prefix
        restore-keys: |
          ${{ runner.os }}-mix-${{ steps.setup-beam.outputs.otp-version }}-${{ steps.setup-beam.outputs.elixir-version }}-
          ${{ runner.os }}-mix-${{ steps.setup-beam.outputs.otp-version }}-
          ${{ runner.os }}-mix-

    # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
    # Cache key based on Elixir & Erlang version (also useful when running in matrix)
    - name: Restore PLT cache
      uses: actions/cache@v2
      id: plt_cache
      with:
        key: |
          ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        restore-keys: |
          ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        path: |
          priv/plts
        
    - name: Dependencies
      run: |
        mix deps.get
        mix deps.compile

    # Create PLTs if no cache was found
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    - name: Code
      run: |
        mix format --check-formatted
        mix compile --warnings-as-errors
        mix credo --strict
        mix dialyzer
        mix docs
 
    - name: Test
      run: |
        mix test --warnings-as-errors --cover --export-coverage default
        mix coveralls.github

    - name: Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: doc-cover
        path: |
          doc
          cover